<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://somecode.net/Cliargs.NET/</id><title>Cliargs.NET</title><subtitle>Command Line Interface Arguments parser for dotnet</subtitle> <updated>2022-04-03T02:02:36+02:00</updated> <author> <name>Younes Cheikh</name> <uri>https://somecode.net/Cliargs.NET/</uri> </author><link rel="self" type="application/atom+xml" href="https://somecode.net/Cliargs.NET/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://somecode.net/Cliargs.NET/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> Â© 2022 Younes Cheikh </rights> <icon>/Cliargs.NET/assets/img/favicons/favicon.ico</icon> <logo>/Cliargs.NET/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Required and Optional arguments</title><link href="https://somecode.net/Cliargs.NET/basic-usage/required-optional-argument/" rel="alternate" type="text/html" title="Required and Optional arguments" /><published>2022-03-23T00:00:00+01:00</published> <updated>2022-03-23T00:00:00+01:00</updated> <id>https://somecode.net/Cliargs.NET/basic-usage/required-optional-argument/</id> <content src="https://somecode.net/Cliargs.NET/basic-usage/required-optional-argument/" /> <author> <name>Younes Cheikh</name> </author> <category term="Basic usage" /> <summary> The difference between required and optional arguments, is that Cliargs.NET throws an exception during the initlization process when missing a required argument, while continues the initialization in a normal way if any optional argument is missing. Each argument is created by default as required unless you make it optional Required argument Arguments are created as required by default, ... </summary> </entry> <entry><title>Regex Rule</title><link href="https://somecode.net/Cliargs.NET/validation-rules/regex-rule/" rel="alternate" type="text/html" title="Regex Rule" /><published>2022-03-22T00:00:00+01:00</published> <updated>2022-03-22T00:00:00+01:00</updated> <id>https://somecode.net/Cliargs.NET/validation-rules/regex-rule/</id> <content src="https://somecode.net/Cliargs.NET/validation-rules/regex-rule/" /> <author> <name>Younes Cheikh</name> </author> <category term="Validation Rules" /> <summary> The Regex Rule is a validation rule allows you to validate the user input using a regular expression pattern. Create an instance To create an instance of the Regex rule, either you use the default constructor or use the static method WithPattern(string pattern). Example below, to set a conditional rule for integer value that must be greater than 0. // Default rule constructor new RegexRule(... </summary> </entry> <entry><title>Value in Range Rule</title><link href="https://somecode.net/Cliargs.NET/validation-rules/range-validation-rule/" rel="alternate" type="text/html" title="Value in Range Rule" /><published>2022-03-22T00:00:00+01:00</published> <updated>2022-03-22T00:00:00+01:00</updated> <id>https://somecode.net/Cliargs.NET/validation-rules/range-validation-rule/</id> <content src="https://somecode.net/Cliargs.NET/validation-rules/range-validation-rule/" /> <author> <name>Younes Cheikh</name> </author> <category term="Validation Rules" /> <summary> This rule checks if a given value is present in a range. Example This example to ensure an input Integer value is in a range of [1, 2, 3] // pass the items of the range RangeValidationRule&amp;lt;int?&amp;gt;.FromRange(1, 2, 3 ); // Or create a range from a collection RangeValidationRule&amp;lt;int?&amp;gt;.FromRangeCollection(new int?[] { 1, 2, 3 }); </summary> </entry> <entry><title>Directory exists</title><link href="https://somecode.net/Cliargs.NET/validation-rules/direcory-exists-rule/" rel="alternate" type="text/html" title="Directory exists" /><published>2022-03-22T00:00:00+01:00</published> <updated>2022-03-22T00:00:00+01:00</updated> <id>https://somecode.net/Cliargs.NET/validation-rules/direcory-exists-rule/</id> <content src="https://somecode.net/Cliargs.NET/validation-rules/direcory-exists-rule/" /> <author> <name>Younes Cheikh</name> </author> <category term="Validation Rules" /> <summary> This rule ensure that a directory exists from a given path. Usage: Just add a new instance of DirectoryExistsRule to argument validation rules when initializing the directory argument object. myDirectoryArg = myDirectoryArg.WithValidationRule(new DirectoryExistsRule()); </summary> </entry> <entry><title>Conditional Rule</title><link href="https://somecode.net/Cliargs.NET/validation-rules/conditional-rule/" rel="alternate" type="text/html" title="Conditional Rule" /><published>2022-03-22T00:00:00+01:00</published> <updated>2022-03-22T00:00:00+01:00</updated> <id>https://somecode.net/Cliargs.NET/validation-rules/conditional-rule/</id> <content src="https://somecode.net/Cliargs.NET/validation-rules/conditional-rule/" /> <author> <name>Younes Cheikh</name> </author> <category term="Validation Rules" /> <summary> The Conditional Rule is very generic allows you to customize the condition to validate the value using lambda expressions. Create an instance To create an instance of the Conditional rule, either you use the default constructor or use the static method WithCondition. Example below, to set a conditional rule for integer value that must be greater than 0. // Default rule constructor new Condi... </summary> </entry> </feed>
